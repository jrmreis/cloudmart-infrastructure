---
# Tasks for setting up application directories and files
- name: Create backend directory
  file:
    path: "{{ backend_dir }}"
    state: directory
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0755'
  tags: [application, directory]
    
- name: Create frontend directory
  file:
    path: "{{ frontend_dir }}"
    state: directory
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0755'
  tags: [application, directory]
    
- name: Download backend files
  get_url:
    url: "{{ backend_zip_url }}"
    dest: "{{ backend_dir }}/cloudmart-backend.zip"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  register: backend_download
  tags: [application, download]
  
- name: Extract backend files
  unarchive:
    src: "{{ backend_dir }}/cloudmart-backend.zip"
    dest: "{{ backend_dir }}"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    remote_src: yes
  when: backend_download.changed
  tags: [application, unarchive]
  
- name: Download frontend files
  get_url:
    url: "{{ frontend_zip_url }}"
    dest: "{{ frontend_dir }}/cloudmart-frontend.zip"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  register: frontend_download
  tags: [application, download]
  
- name: Extract frontend files
  unarchive:
    src: "{{ frontend_dir }}/cloudmart-frontend.zip"
    dest: "{{ frontend_dir }}"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    remote_src: yes
  when: frontend_download.changed
  tags: [application, unarchive]
  
- name: Create backend .env file
  template:
    src: backend-env.j2
    dest: "{{ backend_dir }}/.env"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0600'
  tags: [application, config]
    
- name: Create backend Dockerfile
  template:
    src: backend-dockerfile.j2
    dest: "{{ backend_dir }}/Dockerfile"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  tags: [application, docker]
    
- name: Create frontend .env file
  template:
    src: frontend-env.j2
    dest: "{{ frontend_dir }}/.env"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  tags: [application, config]
    
- name: Create frontend Dockerfile
  template:
    src: frontend-dockerfile.j2
    dest: "{{ frontend_dir }}/Dockerfile"
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  tags: [application, docker]
    
- name: Build backend Docker image
  docker_image:
    name: "{{ backend_image_name }}"
    build:
      path: "{{ backend_dir }}"
    source: build
    tag: "{{ backend_image_tag }}"
  become: yes
  tags: [application, docker, build]
  
- name: Build frontend Docker image
  docker_image:
    name: "{{ frontend_image_name }}"
    build:
      path: "{{ frontend_dir }}"
    source: build
    tag: "{{ frontend_image_tag }}"
  become: yes
  tags: [application, docker, build]
  
- name: Check if backend container exists
  docker_container_info:
    name: "{{ backend_container_name }}"
  register: backend_container_info
  tags: [application, docker, container]

- name: Run backend container
  docker_container:
    name: "{{ backend_container_name }}"
    image: "{{ backend_image_name }}:{{ backend_image_tag }}"
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ backend_port }}:{{ backend_port }}"
    env_file: "{{ backend_dir }}/.env"
  when: not backend_container_info.exists
  become: yes
  tags: [application, docker, container]

- name: Check if frontend container exists
  docker_container_info:
    name: "{{ frontend_container_name }}"
  register: frontend_container_info
  tags: [application, docker, container]

- name: Run frontend container
  docker_container:
    name: "{{ frontend_container_name }}"
    image: "{{ frontend_image_name }}:{{ frontend_image_tag }}"
    state: started
    restart_policy: unless-stopped
    ports:
      - "{{ frontend_port }}:{{ frontend_port }}"
    env_file: "{{ frontend_dir }}/.env"
  when: not frontend_container_info.exists
  become: yes
  tags: [application, docker, container]
