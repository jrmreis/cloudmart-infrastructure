---
# deployment.yml - Tasks for creating and deploying to the EKS cluster

- name: Wait for DynamoDB table to be active
  shell: |
    aws dynamodb describe-table --table-name {{ dynamodb_table_name }} --region {{ aws_region }} --query 'Table.TableStatus' | grep ACTIVE || echo "Table not ready"
  register: dynamodb_status
  until: "'ACTIVE' in dynamodb_status.stdout"
  retries: 15
  delay: 10
  ignore_errors: yes

- name: Create EKS cluster (this will take ~15 minutes)
  shell: |
    eksctl create cluster \
      --name cloudmart \
      --region {{ aws_region }} \
      --nodegroup-name standard-workers \
      --node-type t3.medium \
      --nodes 1 \
      --with-oidc \
      --managed
  args:
    executable: /bin/bash
  become_user: "{{ ec2_username }}"
  register: eks_create
  # Use async to prevent Ansible timeout during cluster creation
  async: 1800  # 30 minutes
  poll: 0
  
- name: Check EKS cluster creation status
  async_status:
    jid: "{{ async_job_id }}"
  register: job_result
  # Remove async tracking if job is no longer valid
  ignore_errors: yes
  when: async_job_id is defined

- name: Debug Async Job Status
  debug:
    var: job_result
  when: job_result is defined

- name: Alternative EKS Cluster Check
  shell: |
    aws eks describe-cluster --name {{ cluster_name }} --query 'cluster.status'
  register: cluster_status
  changed_when: false
  ignore_errors: yes

- name: Print Cluster Status
  debug:
    var: cluster_status.stdout
  
- name: Update kubectl configuration
  shell: aws eks update-kubeconfig --name cloudmart --region {{ aws_region }}
  args:
    executable: /bin/bash
  become_user: "{{ ec2_username }}"
  register: kubeconfig_update
  
- name: Associate IAM OIDC Provider with EKS Cluster
  shell: |
    eksctl utils associate-iam-oidc-provider \
      --region=us-east-1 \
      --cluster=cloudmart \
      --approve
  register: oidc_association
  changed_when: "'associated' in oidc_association.stdout"
  failed_when: oidc_association.rc != 0

- name: Create IAM Service Account for CloudMart Pods
  shell: |
    eksctl create iamserviceaccount \
      --cluster=cloudmart \
      --name=cloudmart-pod-execution-role \
      --role-name=CloudMartPodExecutionRole \
      --attach-policy-arn=arn:aws:iam::aws:policy/AdministratorAccess \
      --region=us-east-1 \
      --approve
  register: service_account_creation
  changed_when: "'created' in service_account_creation.stdout"
  failed_when: service_account_creation.rc != 0

- name: Debug IAM Service Account Creation
  debug:
    var: service_account_creation
  when: service_account_creation.stdout is defined
  
- name: Create backend deployment file
  template:
    src: templates/backend-deployment.yaml.j2
    dest: /home/ec2-user/k8s/backend-deployment.yaml
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
    
- name: Create frontend deployment file
  template:
    src: templates/frontend-deployment.yaml.j2
    dest: /home/ec2-user/k8s/frontend-deployment.yaml
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
    
- name: Apply backend deployment
  shell: kubectl apply -f /home/ec2-user/k8s/backend-deployment.yaml
  args:
    executable: /bin/bash
  become_user: "{{ ec2_username }}"
  register: backend_deployment
  
- name: Apply frontend deployment
  shell: kubectl apply -f /home/ec2-user/k8s/frontend-deployment.yaml
  args:
    executable: /bin/bash
  become_user: "{{ ec2_username }}"
  register: frontend_deployment
  
- name: Wait for services to be provisioned (load balancers take time)
  pause:
    seconds: 60
    prompt: "Waiting for Kubernetes services to be provisioned..."
    
- name: Get Kubernetes services status
  shell: kubectl get services
  args:
    executable: /bin/bash
  become_user: "{{ ec2_username }}"
  register: k8s_services
  changed_when: false
  
- name: Log Kubernetes deployments status
  copy:
    dest: "{{ log_dir }}/kubernetes_deployment_{{ ansible_date_time.date }}.txt"
    content: |
      Backend Deployment: {{ backend_deployment.stdout }}
      Frontend Deployment: {{ frontend_deployment.stdout }}
      Kubernetes Services: {{ k8s_services.stdout }}
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
