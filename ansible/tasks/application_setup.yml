---
# application_setup.yml - Tasks for setting up application directories and files

- name: Create backend directory
  file:
    path: /home/ec2-user/challenge-day2/backend
    state: directory
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0755'
    
- name: Create frontend directory
  file:
    path: /home/ec2-user/challenge-day2/frontend
    state: directory
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0755'
    
- name: Download backend files
  get_url:
    url: https://tcb-public-events.s3.amazonaws.com/mdac/resources/day2/cloudmart-backend.zip
    dest: /home/ec2-user/challenge-day2/backend/cloudmart-backend.zip
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  register: backend_download
  
- name: Extract backend files
  unarchive:
    src: /home/ec2-user/challenge-day2/backend/cloudmart-backend.zip
    dest: /home/ec2-user/challenge-day2/backend
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    remote_src: yes
  when: backend_download.changed
  
- name: Download frontend files
  get_url:
    url: https://tcb-public-events.s3.amazonaws.com/mdac/resources/day2/cloudmart-frontend.zip
    dest: /home/ec2-user/challenge-day2/frontend/cloudmart-frontend.zip
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
  register: frontend_download
  
- name: Extract frontend files
  unarchive:
    src: /home/ec2-user/challenge-day2/frontend/cloudmart-frontend.zip
    dest: /home/ec2-user/challenge-day2/frontend
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    remote_src: yes
  when: frontend_download.changed
  
- name: Create backend .env file
  copy:
    dest: /home/ec2-user/challenge-day2/backend/.env
    content: |
      PORT=5000
      AWS_REGION={{ aws_region }}
      BEDROCK_AGENT_ID=<seu-bedrock-agent-id>
      BEDROCK_AGENT_ALIAS_ID=<seu-bedrock-agent-alias-id>
      OPENAI_API_KEY=<sua-chave-api-openai>
      OPENAI_ASSISTANT_ID=<seu-id-assistente-openai>
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0600'
    
- name: Create backend .env_kube file
  copy:
    dest: /home/ec2-user/challenge-day2/backend/.env_kube
    content: |
      PORT=5000
      AWS_REGION={{ aws_region }}
      BEDROCK_AGENT_ID=<seu-bedrock-agent-id>
      BEDROCK_AGENT_ALIAS_ID=<seu-bedrock-agent-alias-id>
      OPENAI_API_KEY=<sua-chave-api-openai>
      OPENAI_ASSISTANT_ID=<seu-id-assistente-openai>
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0600'
    
- name: Create backend Dockerfile
  copy:
    dest: /home/ec2-user/challenge-day2/backend/Dockerfile
    content: |
      FROM node:18
      WORKDIR /usr/src/app
      COPY package*.json ./
      RUN npm install
      COPY . .
      EXPOSE 5000
      CMD ["npm", "start"]
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
    
- name: Create frontend .env file
  copy:
    dest: /home/ec2-user/challenge-day2/frontend/.env
    content: |
      VITE_API_BASE_URL=http://{{ public_ip }}:5000/api
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
    
- name: Create frontend Dockerfile
  copy:
    dest: /home/ec2-user/challenge-day2/frontend/Dockerfile
    content: |
      FROM node:16-alpine as build
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci
      COPY . .
      RUN npm run build
      FROM node:16-alpine
      WORKDIR /app
      RUN npm install -g serve
      COPY --from=build /app/dist /app
      ENV PORT=5001
      ENV NODE_ENV=production
      EXPOSE 5001
      CMD ["serve", "-s", ".", "-l", "5001"]
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0644'
    
- name: Build backend Docker image
  command: docker build -t cloudmart-backend .
  args:
    chdir: /home/ec2-user/challenge-day2/backend
  become: yes
  
- name: Build frontend Docker image
  command: docker build -t cloudmart-frontend .
  args:
    chdir: /home/ec2-user/challenge-day2/frontend
  become: yes
  
- name: Check if backend container exists
  shell: docker ps -a --filter name=cloudmart-backend-container --format {% raw %}"{{.Names}}"{% endraw %}
  register: backend_container_exists
  changed_when: false
  become: yes

- name: Remove stopped backend container if it exists but isn't running
  command: docker rm cloudmart-backend-container
  when: backend_container_exists.stdout == "cloudmart-backend-container" and "cloudmart-backend-container" not in "{{ lookup('pipe', 'docker ps --format {{.Names}}') }}"
  become: yes
  ignore_errors: yes

- name: Run backend container
  command: docker run -d -p 5000:5000 --env-file .env --name cloudmart-backend-container cloudmart-backend
  args:
    chdir: /home/ec2-user/challenge-day2/backend
  when: backend_container_exists.stdout == ""
  become: yes

- name: Check if frontend container exists
  command: docker ps -a --filter name=cloudmart-frontend-container --format {% raw %}"{{.Names}}"{% endraw %}
  register: frontend_container_exists
  changed_when: false
  become: yes

- name: Remove stopped frontend container if it exists but isn't running
  command: docker rm cloudmart-frontend-container
  when: frontend_container_exists.stdout == "cloudmart-frontend-container" and "cloudmart-frontend-container" not in "{{ lookup('pipe', 'docker ps --format {{.Names}}') }}"
  become: yes
  ignore_errors: yes

- name: Run frontend container
  command: docker run -d -p 5001:5001 --env-file .env --name cloudmart-frontend-container cloudmart-frontend
  args:
    chdir: /home/ec2-user/challenge-day2/frontend
  when: frontend_container_exists.stdout == ""
  become: yes

