---
# kubernetes_setup.yml - Tasks for installing EKS tools and setting up Kubernetes

- name: Install eksctl
  block:
    - name: Download eksctl
      get_url:
        url: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_{{ ansible_system }}_amd64.tar.gz"
        dest: /tmp/eksctl.tar.gz
        mode: '0644'
      
    - name: Extract eksctl
      unarchive:
        src: /tmp/eksctl.tar.gz
        dest: /tmp
        remote_src: yes
      
    - name: Move eksctl to /usr/bin
      copy:
        src: /tmp/eksctl
        dest: /usr/bin/eksctl
        mode: '0755'
        remote_src: yes
        
    - name: Verify eksctl installation
      command: eksctl version
      register: eksctl_version
      changed_when: false
      
    - name: Log eksctl installation
      copy:
        dest: "{{ log_dir }}/eksctl_install_{{ ansible_date_time.date }}.txt"
        content: "{{ eksctl_version.stdout }}"

- name: Install kubectl
  block:
    - name: Download kubectl
      get_url:
        url: "https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl"
        dest: /tmp/kubectl
        mode: '0755'
        
    - name: Create bin directory for ec2-user
      file:
        path: /home/ec2-user/bin
        state: directory
        owner: "{{ ec2_username }}"
        group: "{{ ec2_username }}"
        mode: '0755'
        
    - name: Copy kubectl to user bin directory
      copy:
        src: /tmp/kubectl
        dest: /home/ec2-user/bin/kubectl
        owner: "{{ ec2_username }}"
        group: "{{ ec2_username }}"
        mode: '0755'
        remote_src: yes
        
    - name: Link kubectl to system path
      file:
        src: /home/ec2-user/bin/kubectl
        dest: /usr/local/bin/kubectl
        state: link
        
    - name: Update bashrc with PATH
      lineinfile:
        path: /home/ec2-user/.bashrc
        line: 'export PATH=$PATH:$HOME/bin'
        state: present
        
    - name: Verify kubectl installation
      command: /home/ec2-user/bin/kubectl version --short --client
      register: kubectl_version
      changed_when: false
      
    - name: Log kubectl installation
      copy:
        dest: "{{ log_dir }}/kubectl_install_{{ ansible_date_time.date }}.txt"
        content: "{{ kubectl_version.stdout }}"

- name: Authenticate with ECR
  shell: |
    # Get your AWS account ID
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    # Define region
    AWS_REGION={{ aws_region | default('us-east-1') }}
    # Authenticate
    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  args:
    executable: /bin/bash
  register: ecr_auth
  ignore_errors: yes

- name: Tag and push backend image to ECR
  shell: |
    # Get your AWS account ID
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    # Define region
    AWS_REGION={{ aws_region | default('us-east-1') }}
    # Define ECR repository URL
    BACKEND_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/cloudmart-backend"
    # Tag and push
    docker tag cloudmart-backend:latest ${BACKEND_REPO}:latest
    docker push ${BACKEND_REPO}:latest
  args:
    executable: /bin/bash
  register: backend_push
  ignore_errors: yes
  
- name: Tag and push frontend image to ECR
  docker_image:
    name: "{{ frontend_image_name }}"
    repository: "{{ frontend_ecr_repo }}"
    tag: "{{ frontend_image_tag }}"
    push: yes
  vars:
    frontend_ecr_repo: "{{ hostvars[inventory_hostname].frontend_ecr_repo | default('') }}"
  when: frontend_ecr_repo is defined and frontend_ecr_repo != ''

- name: Create k8s directory
  file:
    path: /home/ec2-user/k8s
    state: directory
    owner: "{{ ec2_username }}"
    group: "{{ ec2_username }}"
    mode: '0755'
- name: Check running containers
  shell: docker ps
  register: docker_status
  changed_when: false

- name: Display running containers
  debug:
    var: docker_status.stdout_lines

- name: Summary
  debug:
    msg: |
      CloudMart setup completed!
      
      Containers should be running on:
      - Backend: http://localhost:5000
      - Frontend: http://localhost:5001
      
      {% if not kubeconfig_update.failed %}
      EKS Cluster deployment was successful.
      {% else %}
      EKS Cluster deployment was skipped or failed.
      You can try manually creating it later with:
        eksctl create cluster --name cloudmart --region us-east-1 --nodegroup-name standard-workers --node-type t3.medium --nodes 1 --with-oidc --managed
      {% endif %}
